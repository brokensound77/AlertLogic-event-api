# cms-detector.py v0.1
# source: https://github.rackspace.com/rob7024/cms-detector.py
#         (modified for use)
# author: Robert Willis

import requests
import threading
import argparse

user_agent = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36',
}


# Mask the user agent so it doesn't show as python and get blocked, set global for request that need to allow for redirects
# Get function to swap the user agent
def get(website_to_scan):
    return requests.get(website_to_scan, allow_redirects=False, headers=user_agent)


def wordpress_scan(website_to_scan):
    return_string = '\n'
    return_string += "[+] Running the WordPress scans...\n"

    # Use requests.get allowing redirects otherwise will always fail
    wpLoginCheck = requests.get(website_to_scan + '/wp-login.php', headers=user_agent)
    if wpLoginCheck.status_code == 200 and "user_login" in wpLoginCheck.text and "404" not in wpLoginCheck.text:
        return_string += "[!] Detected: WordPress WP-Login page: {0}/wp-login.php\n".format(website_to_scan)
    else:
        return_string += " |  Not Detected: WordPress WP-Login page: {0}/wp-login.php\n".format(website_to_scan)

    # Use requests.get allowing redirects otherwise will always fail
    wpAdminCheck = requests.get(website_to_scan + '/wp-admin', headers=user_agent)
    if wpAdminCheck.status_code == 200 and "user_login" in wpAdminCheck.text and "404" not in wpLoginCheck.text:
        return_string += "[!] Detected: WordPress WP-Admin page: {0}/wp-admin\n".format(website_to_scan)
    else:
        return_string += " |  Not Detected: WordPress WP-Admin page: {0}/wp-admin\n".format(website_to_scan)

    wpAdminUpgradeCheck = get(website_to_scan + '/wp-admin/upgrade.php')
    if wpAdminUpgradeCheck.status_code == 200 and "404" not in wpAdminUpgradeCheck.text:
        return_string += "[!] Detected: WordPress WP-Admin/upgrade.php page: {0}/wp-admin/upgrade.php\n".format(
            website_to_scan)
    else:
        return_string += " |  Not Detected: WordPress WP-Admin/upgrade.php page: {0}/wp-admin/upgrade.php\n".format(
            website_to_scan)

    wpAdminReadMeCheck = get(website_to_scan + '/readme.html')
    if wpAdminReadMeCheck.status_code == 200 and "404" not in wpAdminReadMeCheck.text:
        return_string += "[!] Detected: WordPress Readme.html: {0}/readme.html\n".format(website_to_scan)
    else:
        return_string += " |  Not Detected: WordPress Readme.html: {0}/readme.html\n".format(website_to_scan)

    wpLinksCheck = get(website_to_scan)
    if 'wp-' in wpLinksCheck.text:
        return_string += "[!] Detected: WordPress wp- style links detected on index\n"
    else:
        return_string += " |  Not Detected: WordPress wp- style links detected on index\n"
    return return_string


def joomla_scan(website_to_scan):
    return_string = '\n'
    return_string += "[+] Running the Joomla scans...\n"

    joomlaAdminCheck = get(website_to_scan + '/administrator/')
    if joomlaAdminCheck.status_code == 200 and "mod-login-username" in joomlaAdminCheck.text and "404" not in joomlaAdminCheck.text:
        return_string += "[!] Detected: Potential Joomla administrator login page: {0}/administrator/\n".format(
            website_to_scan)
    else:
        return_string += " |  Not Detected: Joomla administrator login page: {0}/administrator/\n".format(
            website_to_scan)

    joomlaReadMeCheck = get(website_to_scan + '/readme.txt')
    if joomlaReadMeCheck.status_code == 200 and "joomla" in joomlaReadMeCheck.text and "404" not in joomlaReadMeCheck.text:
        return_string += "[!] Detected: Joomla Readme.txt: {0}/readme.txt\n".format(website_to_scan)
    else:
        return_string += " |  Not Detected: Joomla Readme.txt: {0}/readme.txt\n".format(website_to_scan)

    joomlaTagCheck = get(website_to_scan)
    if joomlaTagCheck.status_code == 200 and 'name="generator" content="Joomla' in joomlaTagCheck.text and "404" not in joomlaTagCheck.text:
        return_string += "[!] Detected: Generated by Joomla tag on index\n"
    else:
        return_string += " |  Not Detected: Generated by Joomla tag on index\n"

    joomlaStringCheck = get(website_to_scan)
    if joomlaStringCheck.status_code == 200 and "joomla" in joomlaStringCheck.text and "404" not in joomlaStringCheck.text:
        return_string += "[!] Detected: Joomla strings on index\n"
    else:
        return_string += " |  Not Detected: Joomla strings on index\n"

    joomlaDirCheck = get(website_to_scan + '/media/com_joomlaupdate/')
    if joomlaDirCheck.status_code == 403 and "404" not in joomlaDirCheck.text:
        return_string += "[!] Detected: Joomla media/com_joomlaupdate directories: {0}/media/com_joomlaupdate/\n".format(
            website_to_scan)
    else:
        return_string += " |  Not Detected: Joomla media/com_joomlaupdate directories: {0}/media/com_joomlaupdate/\n".format(
            website_to_scan)
    return return_string


def magento_scan(website_to_scan):
    return_string = '\n'
    return_string += "[+] Running the Magento scans...\n"

    magentoAdminCheck = get(website_to_scan + '/index.php/admin/')
    if magentoAdminCheck.status_code == 200 and 'login' in magentoAdminCheck.text and "404" not in magentoAdminCheck.text:
        return_string += "[!] Detected: Potential Magento administrator login page: {0}/index.php/admin\n".format(
            website_to_scan)
    else:
        return_string += " |  Not Detected: Magento administrator login page: {0}/index.php/admin\n".format(
            website_to_scan)

    magentoRelNotesCheck = get(website_to_scan + '/RELEASE_NOTES.txt')
    if magentoRelNotesCheck.status_code == 200 and 'magento' in magentoRelNotesCheck.text:
        return_string += "[!] Detected: Magento Release_Notes.txt: {0}/RELEASE_NOTES.txt\n".format(website_to_scan)
    else:
        return_string += " |  Not Detected: Magento Release_Notes.txt: {0}/RELEASE_NOTES.txt\n".format(website_to_scan)

    magentoCookieCheck = get(website_to_scan + '/js/mage/cookies.js')
    if magentoCookieCheck.status_code == 200 and "404" not in magentoCookieCheck.text:
        return_string += "[!] Detected: Magento cookies.js: {0}/js/mage/cookies.js\n".format(website_to_scan)
    else:
        return_string += " |  Not Detected: Magento cookies.js: {0}/js/mage/cookies.js\n".format(website_to_scan)

    magStringCheck = get(website_to_scan + '/index.php')
    if magStringCheck.status_code == 200 and '/mage/' in magStringCheck.text or 'magento' in magStringCheck.text:
        return_string += "[!] Detected: Magento strings on index\n"
    else:
        return_string += " |  Not Detected: Magento strings on index\n"

    # print magStringCheck.text
    magentoStylesCSSCheck = get(website_to_scan + '/skin/frontend/default/default/css/styles.css')
    if magentoStylesCSSCheck.status_code == 200 and "404" not in magentoStylesCSSCheck.text:
        return_string += "[!] Detected: Magento styles.css: {0}/skin/frontend/default/default/css/styles.css\n".format(
            website_to_scan)
    else:
        return_string += " |  Not Detected: Magento styles.css: {0}/skin/frontend/default/default/css/styles.css\n".format(
            website_to_scan)

    mag404Check = get(website_to_scan + '/errors/design.xml')
    if mag404Check.status_code == 200 and "magento" in mag404Check.text:
        return_string += "[!] Detected: Magento error page design.xml: {0}/errors/design.xml\n".format(website_to_scan)
    else:
        return_string += " |  Not Detected: Magento error page design.xml: {0}/errors/design.xml\n".format(
            website_to_scan)
    return return_string


def drupal_scan(website_to_scan):
    return_string = '\n'
    return_string += "[+] Running the Drupal scans...\n"

    drupalReadMeCheck = get(website_to_scan + '/readme.txt')
    if drupalReadMeCheck.status_code == 200 and 'drupal' in drupalReadMeCheck.text and '404' not in drupalReadMeCheck.text:
        return_string += "[!] Detected: Drupal Readme.txt: {0}/readme.txt\n".format(website_to_scan)
    else:
        return_string += " |  Not Detected: Drupal Readme.txt: {0}/readme.txt\n".format(website_to_scan)

    drupalTagCheck = get(website_to_scan)
    if drupalTagCheck.status_code == 200 and 'name="Generator" content="Drupal' in drupalTagCheck.text:
        return_string += "[!] Detected: Generated by Drupal tag on index\n"
    else:
        return_string += " |  Not Detected: Generated by Drupal tag on index\n"

    drupalCopyrightCheck = get(website_to_scan + '/core/COPYRIGHT.txt')
    if drupalCopyrightCheck.status_code == 200 and 'Drupal' in drupalCopyrightCheck.text and '404' not in drupalCopyrightCheck.text:
        return_string += "[!] Detected: Drupal COPYRIGHT.txt: {0}/core/COPYRIGHT.txt\n".format(website_to_scan)
    else:
        return_string += " |  Not Detected: Drupal COPYRIGHT.txt: {0}/core/COPYRIGHT.txt\n".format(website_to_scan)

    drupalReadme2Check = get(website_to_scan + '/modules/README.txt')
    if drupalReadme2Check.status_code == 200 and 'drupal' in drupalReadme2Check.text and '404' not in drupalReadme2Check.text:
        return_string += "[!] Detected: Drupal modules/README.txt: {0}/modules/README.txt\n".format(website_to_scan)
    else:
        return_string += " |  Not Detected: Drupal modules/README.txt: {0}/modules/README.txt\n".format(website_to_scan)

    drupalStringCheck = get(website_to_scan)
    if drupalStringCheck.status_code == 200 and 'drupal' in drupalStringCheck.text:
        return_string += "[!] Detected: Drupal strings on index\n"
    else:
        return_string += " |  Not Detected: Drupal strings on index\n"
    return return_string


def php_scan(website_to_scan):
    return_string = '\n'
    return_string += "[+] Running the phpMyAdmin scans...\n"

    phpMyAdminCheck = get(website_to_scan)
    if phpMyAdminCheck.status_code == 200 and 'phpmyadmin' in phpMyAdminCheck.text:
        return_string += "[!] Detected: phpMyAdmin index page\n"
    else:
        return_string += " |  Not Detected: phpMyAdmin index page\n"

    pmaCheck = get(website_to_scan)
    if pmaCheck.status_code == 200 and 'pmahomme' in pmaCheck.text or 'pma_' in pmaCheck.text:
        return_string += "[!] Detected: phpMyAdmin pmahomme and pma_ style links on index page\n"
    else:
        return_string += " |  Not Detected: phpMyAdmin pmahomme and pma_ style links on index page\n"

    phpMyAdminConfigCheck = get(website_to_scan + '/config.inc.php')
    if phpMyAdminConfigCheck.status_code == 200 and '404' not in phpMyAdminConfigCheck.text:
        return_string += "[!] Detected: phpMyAdmin configuration file: {0}/config.inc.php\n".format(website_to_scan)
    else:
        return_string += " |  Not Detected: phpMyAdmin configuration file: {0}/config.inc.php\n".format(website_to_scan)
    return return_string


# Begin scan
def scan(site=None):
    # Check to see if the site argument was specified
    # parser = argparse.ArgumentParser()
    # parser.add_argument("-s", "--site", help="Use this option to specify the domain or IP to scan.")
    # args = parser.parse_args()
    if site is None:
        # Get the input from the user
        # print
        # print "Please enter the site or IP you would like to scan below."
        # print "Examples - www.site.com, https://store.org/magento, 192.168.1.50"
        website_to_scan = raw_input('Site to scan: ')
    else:
        website_to_scan = site

    # Check the input for HTTP or HTTPS, if nothing is found assume HTTP
    if len(site) == 0:  # TODO: hacky; change to regex of proper url
        return 'Unable to run cms_detector on site provided: (0)'.format(site)
    if not website_to_scan.startswith('http://') or not website_to_scan.startswith('https://'):
        website_to_scan = 'http://' + website_to_scan

    # Check the input for an ending / and remove it if found
    if website_to_scan.endswith('/'):
        website_to_scan = website_to_scan.strip('/')

    # Check to see if the site is online
    return_string = '\n'
    return_string += "[+] Checking to see if the site is online...\n"

    try:
        onlineCheck = get(website_to_scan)
    except requests.exceptions.ConnectionError as ex:
        return_string += "[!] {0} appears to be offline.\n".format(website_to_scan)
    else:
        if onlineCheck.status_code == 200 or onlineCheck.status_code == 301 or onlineCheck.status_code == 302:
            return_string += " |  {0} appears to be online.\n\n".format(website_to_scan)
            return_string += "Beginning scan...\n\n"
            return_string += "[+] Checking to see if the site is redirecting...\n"
            redirectCheck = requests.get(website_to_scan, headers=user_agent)
            if len(redirectCheck.history) > 0:
                if '301' in str(redirectCheck.history[0]) or '302' in str(redirectCheck.history[0]):
                    return_string += "[!] The site entered appears to be redirecting, please verify the destination site to ensure accurate results!\n"
                    return_string += "[!] It appears the site is redirecting to {0}\n".format(redirectCheck.url)
            elif 'meta http-equiv="REFRESH"' in redirectCheck.text:
                return_string += "[!] The site entered appears to be redirecting, please verify the destination site to ensure accurate results!\n"
            else:
                return_string += " | Site does not appear to be redirecting...\n"
        else:
            return_string += "[!] {0} appears to be online but returned a {1} error.\n\n".format(
                website_to_scan, str(onlineCheck.status_code))
            return return_string

        return_string += "[+] Attempting to get the HTTP headers...\n"
        # Pretty print the headers - courtesy of Jimmy
        for header in onlineCheck.headers:
            try:
                return_string += " | {0} : {1}\n".format(header, onlineCheck.headers[header])
            except Exception as ex:
                return_string += "[!] Error: {0}\n".format(ex.message)

        scan_list = ['wordpress', 'joomla', 'magento', 'drupal', 'php']
        threads = []
        scan_results = []

        def __scan_list(website_to_scan, type):
            if type == 'wordpress':
                scan_results.append(wordpress_scan(website_to_scan))
            elif type == 'joomla':
                scan_results.append(joomla_scan(website_to_scan))
            elif type == 'magento':
                scan_results.append(magento_scan(website_to_scan))
            elif type == 'drupal':
                scan_results.append(drupal_scan(website_to_scan))
            elif type == 'php':
                scan_results.append(php_scan(website_to_scan))

        for i in scan_list:
            t = threading.Thread(target=__scan_list, args=(website_to_scan, i,))
            threads.append(t)
            t.start()
        for _thread in threads:
            _thread.join()

        for result in scan_results:
            return_string += result

        return_string += "Scan is now complete!\n"

        return return_string
